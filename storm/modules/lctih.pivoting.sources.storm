init {
    $utils = $lib.import(lctih.utils)
}

// TODO: Eventually, migrate some sources to the respective APIs

function printSeparatorMessage(node) {

    $lib.print("\n[+] ============================================")
    $lib.print("[+] Generating sources for {value}", value=$utils.get_value_or_repr($node)) | spin

    return($lib.null)
}

function getGoogleSources(node) {
    if ($utils.is_in_list($node.form(), ('inet:fqdn', 'inet:ipv4'))) {
        $lib.print("https://www.google.com/search?q=site:{value}", value=$utils.get_value_or_repr($node))
    }

    $lib.print('https://www.google.com/search?q="{value}"', value=$utils.get_value_or_repr($node)) | spin

    return($lib.null)
}

function getDuckDuckGoSources(node) {
    if ($utils.is_in_list($node.form(), ('inet:fqdn', 'inet:ipv4'))) {
        $lib.print("https://duckduckgo.com/?q=site:{value}", value=$utils.get_value_or_repr($node))
    }

    $lib.print('https://duckduckgo.com/?q="{value}"', value=$utils.get_value_or_repr($node)) | spin

    return($lib.null)
}

function getAlienaultSources(node) {
    $lib.print("https://otx.alienvault.com/browse/global/pulses?q={value}", value=$utils.get_value_or_repr($node)) | spin
    return($lib.null)
}

function getVirusTotalSources(node) {
    $lib.print("https://www.virustotal.com/gui/search/{value}", value=$utils.get_value_or_repr($node)) | spin
    return($lib.null)
}

function getORKLSources(node) {
    $lib.print("https://orkl.eu/search") | spin
    return($lib.null)
}

function getThreatMinerSources(node) {
    $lib.print("https://www.threatminer.org/") | spin
    return($lib.null)
}

function getIPInfoSources(node) {
    if ($node.form() = 'inet:ipv4') {
        $lib.print("https://ipinfo.io/{value}", value=$node.repr()) | spin
    }
    return($lib.null)
}

function getTwitterSources(node) {
    $lib.print('https://twitter.com/search?q="{value}"&f=live', value=$utils.get_value_or_repr($node)) | spin
    return($lib.null)
}

function getGitHubSources(node) {
    $lib.print('https://github.com/search?q="{value}"', value=$utils.get_value_or_repr($node)) | spin
    return($lib.null)
}

function getCompleteDNSSources(node) {
    if ($node.form() = 'inet:fqdn') {
            $lib.print("https://completedns.com/dns-history/") | spin
        }
    return($lib.null)
}

function getVXUndergroundSources(node) {
    if ($utils.is_in_list($node.form(), ('hash:md5', 'hash:sha1', 'hash:sha256'))) {
        $lib.print("https://www.vx-underground.org/malware.html") | spin
    }
    return($lib.null)
}

function getRiskIQSources(node) {
    $lib.print("https://community.riskiq.com/research?query={value}", value=$utils.get_value_or_repr($node)) | spin
    return($lib.null)
}

function getURLScanSources(node) {
    if ($utils.is_in_list($node.form(), ('inet:fqdn', 'inet:ipv4'))) {
        $lib.print("https://urlscan.io/search/#{value}", value=$utils.get_value_or_repr($node)) | spin
    }
    return($lib.null)
}

function getHybridAnalysisSources(node) {
    if ($utils.is_in_list($node.form(), ('hash:md5', 'hash:sha1', 'hash:sha256'))) {
        $lib.print("https://www.hybrid-analysis.com/search?query={value}", value=$node.value()) | spin
    }
    elif ($node.form() = 'it:app:yara:rule') {
        $lib.print("https://www.hybrid-analysis.com/yara-search") | spin
    }
    elif ($node.form() = 'it:dev:str') {
        $lib.print("https://www.hybrid-analysis.com/string-search") | spin
    }

    return($lib.null)
}

function getVirusShareSources(node) {
    if ($utils.is_in_list($node.form(), ('hash:md5', 'hash:sha1', 'hash:sha256'))) {
        $lib.print("https://virusshare.com") | spin
    }

    return($lib.null)
}

function getAnyRunSources(node) {
    if ($utils.is_in_list($node.form(), ('hash:md5', 'hash:sha1', 'hash:sha256'))) {
        $lib.print("https://app.any.run/submissions") | spin
    }

    return($lib.null)
}

function getCRTSHSources(node) {
    if ($node.form() = 'inet:fqdn') {
        $lib.print("https://crt.sh/?q={value}", value=$node.value()) | spin
    }

    return($lib.null)
}

function getWhoIsSources(node) {
    if ($node.form() = 'inet:ipv4') {
        $lib.print("https://who.is/whois-ip/ip-address/{value}", value=$node.repr()) | spin
    }

    return($lib.null)
}

function getWhoxySources(node) {
    if ($node.form() = 'inet:fqdn') {
        $lib.print("https://www.whoxy.com/{value}", value=$node.value()) | spin
    }

    elif ($node.form() = 'inet:email') {
        $lib.print("https://www.whoxy.com/email/{value}", value=$node.value()) | spin
    }


    return($lib.null)
}

function getArchiveSources(node) {
    if ($node.form() = 'inet:fqdn') {
        $lib.print("https://web.archive.org/web/*/{value}*", value=$node.value())
        $lib.print("https://archive.ph/*.{value}", value=$node.value()) | spin
    }

    return($lib.null)
}

function getSecurityTrailsSources(node) {
    if ($node.form() = 'inet:fqdn') {
        $lib.print("https://securitytrails.com/domain/{value}/history/a", value=$node.value()) | spin
    }

    return($lib.null)
}

function getBazaarAbuseSources(node) {
    if ($utils.is_in_list($node.form(), ('hash:md5', 'hash:sha1', 'hash:sha256'))) {
        $lib.print("https://bazaar.abuse.ch/browse/") | spin
    }
    elif ($node.form() = 'it:app:yara:rule') {
        $lib.print("https://bazaar.abuse.ch/account/") | spin
    }

    return($lib.null)
}

function getHashLookupCirclLuSources(node) {
    if ($utils.is_in_list($node.form(), ('hash:md5', 'hash:sha1', 'hash:sha256'))) {
        $lib.print("https://hashlookup.circl.lu/") | spin
    }

    return($lib.null)
}

function getTriageSources(node) {
    if ($utils.is_in_list($node.form(), ('hash:md5', 'hash:sha1', 'hash:sha256'))) {
        $lib.print("https://tria.ge/s?q={value}", value=$node.value()) | spin
    }

    return($lib.null)
}

function getMalShareSources(node) {
    if ($utils.is_in_list($node.form(), ('hash:md5', 'hash:sha1', 'hash:sha256'))) {
        $lib.print("https://malshare.com/search.php?query={value}", value=$node.value()) | spin
    }

    return($lib.null)
}

function getCensysSources(node) {
    if ($utils.is_in_list($node.form(), ('inet:fqdn', 'inet:ipv4'))) {
        $lib.print('https://search.censys.io/search?resource=hosts&q="{value}"', value=$node.repr())
        $lib.print('https://search.censys.io/certificates?q="{value}"', value=$utils.get_value_or_repr($node)) | spin
    }

    return($lib.null)
}

function getRobtexSources(node) {
    if ($node.form() = 'inet:fqdn') {
        $lib.print("https://www.robtex.com/dns-lookup/{value}", value=$node.value()) | spin
    }

    return($lib.null)
}

function getIntelligenceXSources(node) {
    if ($utils.is_in_list($node.form(), ('inet:fqdn', 'inet:ipv4', 'inet:email'))) {
        $lib.print("https://intelx.io/?s={value}", value=$utils.get_value_or_repr($node)) | spin
    }

    return($lib.null)
}

function getShodanSources(node) {
    if ($node.form() = 'inet:fqdn') {
            $lib.print("https://www.shodan.io/search?query=hostname:{value}", value=$node.value()) | spin
        }
    elif ($node.form() = 'inet:ipv4') {
            $lib.print("https://www.shodan.io/search?query=ip:{value}", value=$node.repr()) | spin
        }
    else {
            $lib.print("https://www.shodan.io/search?query={value}", value=$utils.get_value_or_repr($node)) | spin
        }

    return($lib.null)
}

function getHackerNewsSources(node) {
    $lib.print("https://hn.algolia.com/?dateRange=all&page=0&prefix=true&query={value}&sort=byPopularity&type=all", value=$utils.get_value_or_repr($node)) | spin

    return($lib.null)
}

function getPulseDiveSources(node) {
    $lib.print("https://pulsedive.com/") | spin

    return($lib.null)
}

function getInQuestSources(node) {
    $lib.print("https://labs.inquest.net/") | spin

    return($lib.null)
}

function getUrlHausSources(node) {
    if ($node.form() = 'inet:url') {
        $lib.print("https://urlhaus.abuse.ch/browse.php?search={value}", value=$node.value()) | spin
    }

    return($lib.null)
}

function getViewDNSSources(node) {
    if ($node.form() = 'inet:email') {
        $lib.print("https://viewdns.info/reversewhois/?q={value}", value=$node.value()) | spin
    }

    return($lib.null)
}

function getGauCommand(node){
    if ($node.form() = 'inet:fqdn') {
        $lib.print("gau {value}", value=$node.value()) | spin
    }
}

function generatePivotingSources(node, external) {
    if (not $node) {
        return($lib.null)
    }

    // Generate sources only for specific form types:
    $type = $node.form()
    if (not $utils.is_in_list($type, ('inet:fqdn', 'inet:ipv4', 'hash:md5', 'hash:sha1', 'hash:sha256',
                                      'inet:email', 'it:app:yara:rule', 'inet:url', 'it:dev:str'))) {
        return($lib.null)
    }

    $printSeparatorMessage($node)

    $getGoogleSources($node)
    $getDuckDuckGoSources($node)
    $getAlienaultSources($node)
    $getVirusTotalSources($node)
    $getORKLSources($node)
    $getThreatMinerSources($node)
    $getIPInfoSources($node)
    $getTwitterSources($node)
    $getGitHubSources($node)
    $getCompleteDNSSources($node)
    $getVXUndergroundSources($node)
    $getRiskIQSources($node)
    $getURLScanSources($node)
    $getHybridAnalysisSources($node)
    $getVirusShareSources($node)
    $getAnyRunSources($node)
    $getCRTSHSources($node)
    $getWhoIsSources($node)
    $getWhoxySources($node)
    $getArchiveSources($node)
    $getSecurityTrailsSources($node)
    $getBazaarAbuseSources($node)
    $getHashLookupCirclLuSources($node)
    $getTriageSources($node)
    $getMalShareSources($node)
    $getCensysSources($node)
    $getRobtexSources($node)
    $getShodanSources($node)
    $getIntelligenceXSources($node)
    $getHackerNewsSources($node)
    $getPulseDiveSources($node)
    $getInQuestSources($node)
    $getUrlHausSources($node)
    $getViewDNSSources($node)

    // For now just print some commands:
    $getGauCommand($node)

    if ($external) {
        // TODO: Get the external sources here.
    }

}
